{"meta":{"title":"我的博客","subtitle":"","description":"","author":"John Doe","url":"https://he_shangshan.gitee.io/blog","root":"/blog/blog/"},"pages":[{"title":"404 Not Found","date":"2020-03-20T09:06:13.136Z","updated":"2020-03-20T09:06:13.136Z","comments":true,"path":"404.html","permalink":"https://he_shangshan.gitee.io/blog/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2020-03-20T12:42:50.126Z","updated":"2020-03-20T12:42:50.126Z","comments":true,"path":"categories/index.html","permalink":"https://he_shangshan.gitee.io/blog/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-20T12:31:15.433Z","updated":"2020-03-20T12:31:15.433Z","comments":true,"path":"about/index.html","permalink":"https://he_shangshan.gitee.io/blog/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2020-03-20T09:02:48.556Z","updated":"2020-03-20T09:02:48.556Z","comments":true,"path":"friends/index.html","permalink":"https://he_shangshan.gitee.io/blog/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2020-03-20T12:43:59.212Z","updated":"2020-03-20T12:43:59.212Z","comments":true,"path":"mylist/index.html","permalink":"https://he_shangshan.gitee.io/blog/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-03-21T17:50:32.079Z","updated":"2020-03-21T17:50:32.079Z","comments":true,"path":"tags/index.html","permalink":"https://he_shangshan.gitee.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java集合","slug":"Java集合","date":"2020-03-21T15:57:34.000Z","updated":"2020-03-21T18:04:52.684Z","comments":true,"path":"2020/03/21/Java集合/","link":"","permalink":"https://he_shangshan.gitee.io/blog/2020/03/21/Java%E9%9B%86%E5%90%88/","excerpt":"集合类存放于java.util包中。集合类存放的都是对象的引用，而非对象本身。常见的集合主要有三种——Set(集）、List（列表）和Map（映射）。其中，List和Set 都实现了 Collection 接口，并且List和Set也是接口，而Map 为独立接口 Connection接口: ——List 有序,可重复 ArrayList优点:底层数据结构是数组，查询快，增删慢。缺点: 线程不安全，效率高","text":"集合类存放于java.util包中。集合类存放的都是对象的引用，而非对象本身。常见的集合主要有三种——Set(集）、List（列表）和Map（映射）。其中，List和Set 都实现了 Collection 接口，并且List和Set也是接口，而Map 为独立接口 Connection接口: ——List 有序,可重复 ArrayList优点:底层数据结构是数组，查询快，增删慢。缺点: 线程不安全，效率高 Vector优点: 底层数据结构是数组，查询快，增删慢。缺点: 线程安全，效率低 LinkedList优点: 底层数据结构是链表，查询慢，增删快。缺点: 线程不安全，效率高 ——Set 无序,唯一 HashSet底层数据结构是哈希表。(无序,唯一)如何来保证元素唯一性?依赖两个方法：hashCode()和equals() LinkedHashSet底层数据结构是双向链表和哈希表，有序。由链表保证元素有序，由哈希表保证元素唯一。 TreeSet底层数据结构是红黑树，内部实现排序，也可以自定义排序规则。自然排序、比较器排序保证元素排序。根据比较的返回值是否是0来保证元素唯一性。","categories":[{"name":"Java","slug":"Java","permalink":"https://he_shangshan.gitee.io/blog/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://he_shangshan.gitee.io/blog/tags/Java/"}]},{"title":"SpringMVC：整合SSM-图书管理","slug":"SpringMVC：整合SSM","date":"2020-03-19T18:13:05.000Z","updated":"2020-03-21T03:41:47.669Z","comments":true,"path":"2020/03/20/SpringMVC：整合SSM/","link":"","permalink":"https://he_shangshan.gitee.io/blog/2020/03/20/SpringMVC%EF%BC%9A%E6%95%B4%E5%90%88SSM/","excerpt":"环境要求 IDEA MySql5.7.19 Tomcat 9 Maven 3.6","text":"环境要求 IDEA MySql5.7.19 Tomcat 9 Maven 3.6 数据库环境创建一个存放书籍数据的数据库表 123456789101112131415161718CREATE DATABASE &#96;ssmbuild&#96;;USE &#96;ssmbuild&#96;;DROP TABLE IF EXISTS &#96;books&#96;;CREATE TABLE &#96;books&#96; ( &#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;, &#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;, &#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;, &#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;, KEY &#96;bookID&#96; (&#96;bookID&#96;)) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES (1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;); 基本环境搭建1、新建一Maven项目！ ssmbuild ， 添加web的支持2、导入相关的pom依赖！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;dependencies&gt; &lt;!--Junit--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;&#x2F;groupId&gt; &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt; &lt;version&gt;4.12&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!--数据库驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt; &lt;version&gt;5.1.47&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;&#x2F;groupId&gt; &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt; &lt;version&gt;0.9.5.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!--Servlet - JSP --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt; &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt; &lt;version&gt;2.5&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt; &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt; &lt;version&gt;2.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt; &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt; &lt;version&gt;1.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!--Mybatis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt; &lt;version&gt;3.5.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt; &lt;version&gt;2.0.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!--Spring--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt; &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt; &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt; 3、Maven资源过滤设置 1234567891011121314151617181920&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt; &lt;includes&gt; &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt; &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt; &lt;&#x2F;includes&gt; &lt;filtering&gt;false&lt;&#x2F;filtering&gt; &lt;&#x2F;resource&gt; &lt;resource&gt; &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt; &lt;includes&gt; &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt; &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt; &lt;&#x2F;includes&gt; &lt;filtering&gt;false&lt;&#x2F;filtering&gt; &lt;&#x2F;resource&gt; &lt;&#x2F;resources&gt;&lt;&#x2F;build&gt; 4、建立基本结构和配置框架！ com.kuang.pojo com.kuang.dao com.kuang.service com.kuang.controller mybatis-config.xml 1234567&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;&#x2F;configuration&gt; applicationContext.xml 1234567&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;&lt;&#x2F;beans&gt; Mybatis层编写1、数据库配置文件 database.properties 1234jdbc.driver&#x3D;com.mysql.jdbc.Driverjdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssmbuild?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8jdbc.username&#x3D;rootjdbc.password&#x3D;123456 2、IDEA关联数据库3、编写MyBatis的核心文件 1234567891011121314&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;typeAliases&gt; &lt;package name&#x3D;&quot;com.kuang.pojo&quot;&#x2F;&gt; &lt;&#x2F;typeAliases&gt; &lt;mappers&gt; &lt;mapper resource&#x3D;&quot;com&#x2F;kuang&#x2F;dao&#x2F;BookMapper.xml&quot;&#x2F;&gt; &lt;&#x2F;mappers&gt;&lt;&#x2F;configuration&gt; 4、编写数据库对应的实体类 com.kuang.pojo.Books使用lombok插件！ 123456789101112131415161718&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;package com.kuang.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class Books &#123; private int bookID; private String bookName; private int bookCounts; private String detail; &#125; 5、编写Dao层的 Mapper接口！ 123456789101112131415161718192021222324&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;package com.kuang.dao;import com.kuang.pojo.Books;import java.util.List;public interface BookMapper &#123; &#x2F;&#x2F;增加一个Book int addBook(Books book); &#x2F;&#x2F;根据id删除一个Book int deleteBookById(int id); &#x2F;&#x2F;更新Book int updateBook(Books books); &#x2F;&#x2F;根据id查询,返回一个Book Books queryBookById(int id); &#x2F;&#x2F;查询全部Book,返回list集合 List&lt;Books&gt; queryAllBook();&#125; 6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包； 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace&#x3D;&quot;com.kuang.dao.BookMapper&quot;&gt; &lt;!--增加一个Book--&gt; &lt;insert id&#x3D;&quot;addBook&quot; parameterType&#x3D;&quot;Books&quot;&gt; insert into ssmbuild.books(bookName,bookCounts,detail) values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;) &lt;&#x2F;insert&gt; &lt;!--根据id删除一个Book--&gt; &lt;delete id&#x3D;&quot;deleteBookById&quot; parameterType&#x3D;&quot;int&quot;&gt; delete from ssmbuild.books where bookID&#x3D;#&#123;bookID&#125; &lt;&#x2F;delete&gt; &lt;!--更新Book--&gt; &lt;update id&#x3D;&quot;updateBook&quot; parameterType&#x3D;&quot;Books&quot;&gt; update ssmbuild.books set bookName &#x3D; #&#123;bookName&#125;,bookCounts &#x3D; #&#123;bookCounts&#125;,detail &#x3D; #&#123;detail&#125; where bookID &#x3D; #&#123;bookID&#125; &lt;&#x2F;update&gt; &lt;!--根据id查询,返回一个Book--&gt; &lt;select id&#x3D;&quot;queryBookById&quot; resultType&#x3D;&quot;Books&quot;&gt; select * from ssmbuild.books where bookID &#x3D; #&#123;bookID&#125; &lt;&#x2F;select&gt; &lt;!--查询全部Book--&gt; &lt;select id&#x3D;&quot;queryAllBook&quot; resultType&#x3D;&quot;Books&quot;&gt; SELECT * from ssmbuild.books &lt;&#x2F;select&gt;&lt;&#x2F;mapper&gt; 7、编写Service层的接口和实现类接口 1234567891011121314151617181920package com.kuang.service;import com.kuang.pojo.Books;import java.util.List;&#x2F;&#x2F;BookService:底下需要去实现,调用dao层public interface BookService &#123; &#x2F;&#x2F;增加一个Book int addBook(Books book); &#x2F;&#x2F;根据id删除一个Book int deleteBookById(int id); &#x2F;&#x2F;更新Book int updateBook(Books books); &#x2F;&#x2F;根据id查询,返回一个Book Books queryBookById(int id); &#x2F;&#x2F;查询全部Book,返回list集合 List&lt;Books&gt; queryAllBook();&#125; 实现类: 1234567891011121314151617181920212223242526272829303132333435package com.kuang.service;import com.kuang.dao.BookMapper;import com.kuang.pojo.Books;import java.util.List;public class BookServiceImpl implements BookService &#123; &#x2F;&#x2F;调用dao层的操作，设置一个set接口，方便Spring管理 private BookMapper bookMapper; public void setBookMapper(BookMapper bookMapper) &#123; this.bookMapper &#x3D; bookMapper; &#125; public int addBook(Books book) &#123; return bookMapper.addBook(book); &#125; public int deleteBookById(int id) &#123; return bookMapper.deleteBookById(id); &#125; public int updateBook(Books books) &#123; return bookMapper.updateBook(books); &#125; public Books queryBookById(int id) &#123; return bookMapper.queryBookById(id); &#125; public List&lt;Books&gt; queryAllBook() &#123; return bookMapper.queryAllBook(); &#125;&#125; Spring层1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；2、我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beanshttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsdhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;contexthttps:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt; &lt;!-- 配置整合mybatis --&gt; &lt;!-- 1.关联数据库文件 --&gt; &lt;context:property-placeholder location&#x3D;&quot;classpath:database.properties&quot;&#x2F;&gt; &lt;!-- 2.数据库连接池 --&gt; &lt;!--数据库连接池dbcp 半自动化操作 不能自动连接c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面） --&gt; &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;&lt;!-- 配置连接池属性 --&gt;&lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;&lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;&lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;&lt;!-- c3p0连接池的私有属性 --&gt;&lt;property name&#x3D;&quot;maxPoolSize&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;&lt;property name&#x3D;&quot;minPoolSize&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;&lt;!-- 关闭连接后不自动commit --&gt;&lt;property name&#x3D;&quot;autoCommitOnClose&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;&lt;!-- 获取连接超时时间 --&gt;&lt;property name&#x3D;&quot;checkoutTimeout&quot; value&#x3D;&quot;10000&quot;&#x2F;&gt;&lt;!-- 当获取连接失败重试次数 --&gt;&lt;property name&#x3D;&quot;acquireRetryAttempts&quot; value&#x3D;&quot;2&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; &lt;!-- 3.配置SqlSessionFactory对象 --&gt; &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;!-- 注入数据库连接池 --&gt;&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;&lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt; &lt;!--解释 ： https:&#x2F;&#x2F;www.cnblogs.com&#x2F;jpfss&#x2F;p&#x2F;7799806.html--&gt; &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;&lt;!-- 注入sqlSessionFactory --&gt;&lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;&lt;!-- 给出需要扫描Dao接口包 --&gt;&lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.kuang.dao&quot;&#x2F;&gt; &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt; 3、Spring整合service层 123456789101112131415161718192021222324&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt; &lt;!-- 扫描service相关的bean --&gt; &lt;context:component-scan base-package&#x3D;&quot;com.kuang.service&quot; &#x2F;&gt; &lt;!--BookServiceImpl注入到IOC容器中--&gt; &lt;bean id&#x3D;&quot;BookServiceImpl&quot; class&#x3D;&quot;com.kuang.service.BookServiceImpl&quot;&gt;&lt;property name&#x3D;&quot;bookMapper&quot; ref&#x3D;&quot;bookMapper&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; &lt;!-- 配置事务管理器 --&gt; &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;&lt;!-- 注入数据库连接池 --&gt;&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt; &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt; SpringMVC层1、web.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot; version&#x3D;&quot;4.0&quot;&gt; &lt;!--DispatcherServlet--&gt; &lt;servlet&gt; &lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt; &lt;&#x2F;init-param&gt; &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt; &lt;&#x2F;servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt; &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt; &lt;&#x2F;servlet-mapping&gt; &lt;!--encodingFilter--&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt; &lt;filter-class&gt; org.springframework.web.filter.CharacterEncodingFilter &lt;&#x2F;filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt; &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt; &lt;&#x2F;init-param&gt; &lt;&#x2F;filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt; &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt; &lt;&#x2F;filter-mapping&gt; &lt;!--Session过期时间--&gt; &lt;session-config&gt; &lt;session-timeout&gt;15&lt;&#x2F;session-timeout&gt; &lt;&#x2F;session-config&gt; &lt;&#x2F;web-app&gt; 2、spring-mvc.xml 12345678910111213141516171819202122232425262728293031&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt; &lt;!-- 配置SpringMVC --&gt; &lt;!-- 1.开启SpringMVC注解驱动 --&gt; &lt;mvc:annotation-driven &#x2F;&gt; &lt;!-- 2.静态资源默认servlet配置--&gt; &lt;mvc:default-servlet-handler&#x2F;&gt; &lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt; &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name&#x3D;&quot;viewClass&quot; value&#x3D;&quot;org.springframework.web.servlet.view.JstlView&quot; &#x2F;&gt; &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt; &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt; &lt;&#x2F;bean&gt; &lt;!-- 4.扫描web相关的bean --&gt; &lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot; &#x2F;&gt;&lt;&#x2F;beans&gt; 3、Spring配置整合文件，applicationContext.xml 1234567891011&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt; &lt;import resource&#x3D;&quot;spring-dao.xml&quot;&#x2F;&gt; &lt;import resource&#x3D;&quot;spring-service.xml&quot;&#x2F;&gt; &lt;import resource&#x3D;&quot;spring-mvc.xml&quot;&#x2F;&gt; &lt;&#x2F;beans&gt; 配置文件结束,Controller 和 视图层编写 1、BookController 类编写 ， 方法一：查询全部书籍 12345678910111213141516 @Controller@RequestMapping(&quot;&#x2F;book&quot;)public class BookController &#123; @Autowired @Qualifier(&quot;BookServiceImpl&quot;) private BookService bookService; @RequestMapping(&quot;&#x2F;allBook&quot;) public String list(Model model) &#123; List&lt;Books&gt; list &#x3D; bookService.queryAllBook(); model.addAttribute(&quot;list&quot;, list); return &quot;allBook&quot;; &#125;&#125; 2、编写首页 1234567891011121314151617181920212223&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; pageEncoding&#x3D;&quot;UTF-8&quot; %&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;首页&lt;&#x2F;title&gt; &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt; a &#123; text-decoration: none; color: black; font-size: 18px; &#125; h3 &#123; width: 180px; height: 38px; margin: 100px auto; text-align: center; line-height: 38px; background: deepskyblue; border-radius: 4px; &#125; &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt; 3、书籍列表页面 allbook.jsp 123456789101112131415161718192021222324&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;书籍列表&lt;&#x2F;title&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt; &lt;!-- 引入 Bootstrap --&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;div class&#x3D;&quot;page-header&quot;&gt; &lt;h1&gt; &lt;small&gt;书籍列表 —— 显示所有书籍&lt;&#x2F;small&gt; &lt;&#x2F;h1&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; 4、BookController 类编写 ， 方法二：添加书籍 1234567891011@RequestMapping(&quot;&#x2F;toAddBook&quot;)public String toAddPaper() &#123; return &quot;addBook&quot;;&#125;@RequestMapping(&quot;&#x2F;addBook&quot;)public String addPaper(Books books) &#123; System.out.println(books); bookService.addBook(books); return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#125; 5、添加书籍页面：addBook.jsp 12345678910111213141516171819202122232425262728293031&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;新增书籍&lt;&#x2F;title&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt; &lt;!-- 引入 Bootstrap --&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;div class&#x3D;&quot;page-header&quot;&gt; &lt;h1&gt; &lt;small&gt;新增书籍&lt;&#x2F;small&gt; &lt;&#x2F;h1&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;addBook&quot; method&#x3D;&quot;post&quot;&gt; 书籍名称：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookName&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; 书籍数量：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookCounts&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; 书籍详情：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;detail&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;添加&quot;&gt; &lt;&#x2F;form&gt;&lt;&#x2F;div&gt; 6、BookController 类编写 ， 方法三：修改书籍 1234567891011121314151617@RequestMapping(&quot;&#x2F;toUpdateBook&quot;)public String toUpdateBook(Model model, int id) &#123; Books books &#x3D; bookService.queryBookById(id); System.out.println(books); model.addAttribute(&quot;book&quot;,books ); return &quot;updateBook&quot;;&#125;@RequestMapping(&quot;&#x2F;updateBook&quot;)public String updateBook(Model model, Books book) &#123; System.out.println(book); bookService.updateBook(book); Books books &#x3D; bookService.queryBookById(book.getBookID()); model.addAttribute(&quot;books&quot;, books); return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#125; 7、修改书籍页面 updateBook.jsp 1234567891011121314151617181920212223242526272829303132&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;修改信息&lt;&#x2F;title&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt; &lt;!-- 引入 Bootstrap --&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;div class&#x3D;&quot;page-header&quot;&gt; &lt;h1&gt; &lt;small&gt;修改信息&lt;&#x2F;small&gt; &lt;&#x2F;h1&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;updateBook&quot; method&#x3D;&quot;post&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;bookID&quot; value&#x3D;&quot;$&#123;book.getBookID()&#125;&quot;&#x2F;&gt; 书籍名称：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookName&quot; value&#x3D;&quot;$&#123;book.getBookName()&#125;&quot;&#x2F;&gt; 书籍数量：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookCounts&quot; value&#x3D;&quot;$&#123;book.getBookCounts()&#125;&quot;&#x2F;&gt; 书籍详情：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;detail&quot; value&#x3D;&quot;$&#123;book.getDetail() &#125;&quot;&#x2F;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt; &lt;&#x2F;form&gt;&lt;&#x2F;div&gt; 8、BookController 类编写 ， 方法四：删除书籍 12345@RequestMapping(&quot;&#x2F;del&#x2F;&#123;bookId&#125;&quot;)public String deleteBook(@PathVariable(&quot;bookId&quot;) int id) &#123; bookService.deleteBookById(id); return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#125; 配置Tomcat，进行运行！","categories":[{"name":"Java","slug":"Java","permalink":"https://he_shangshan.gitee.io/blog/categories/Java/"},{"name":"SSM","slug":"Java/SSM","permalink":"https://he_shangshan.gitee.io/blog/categories/Java/SSM/"}],"tags":[]},{"title":"搭建django虚拟环境","slug":"搭建django虚拟环境","date":"2020-03-19T17:22:35.000Z","updated":"2020-03-20T15:01:35.268Z","comments":true,"path":"2020/03/20/搭建django虚拟环境/","link":"","permalink":"https://he_shangshan.gitee.io/blog/2020/03/20/%E6%90%AD%E5%BB%BAdjango%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","excerpt":"安装virtualenv(虚拟环境) virtualenv 优点 1、可以使用不同的应用开发环境独立 2、环境升级不影响其他应用，也不影响全局的Python环境 3、可以防止系统中出现包管理混乱和版本冲突","text":"安装virtualenv(虚拟环境) virtualenv 优点 1、可以使用不同的应用开发环境独立 2、环境升级不影响其他应用，也不影响全局的Python环境 3、可以防止系统中出现包管理混乱和版本冲突 一、建立虚拟环境(单个) 默认路径 进入环境 输入 activate.bat(进入虚拟环境)输入deactivate(退出环境)二、建立多个虚拟环境pip install virtualenvwrapper-win(前提需要pip virtualenv) 默认路径新建虚拟环境（可以多个）mkvirtualenv testvir (环境名称) workon(查看自己建立的虚拟环境) 进入和查看pip 安装成功 在PyCharm中新建django中找到搭建的环境 搭建成功虚拟环境","categories":[{"name":"Python","slug":"Python","permalink":"https://he_shangshan.gitee.io/blog/categories/Python/"},{"name":"Django","slug":"Python/Django","permalink":"https://he_shangshan.gitee.io/blog/categories/Python/Django/"}],"tags":[]},{"title":"Git用户注册","slug":"Git注册登录","date":"2020-03-18T07:22:35.000Z","updated":"2020-03-22T05:29:56.293Z","comments":true,"path":"2020/03/18/Git注册登录/","link":"","permalink":"https://he_shangshan.gitee.io/blog/2020/03/18/Git%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95/","excerpt":"一、执行登陆用户名和密码命令 git config –gl obal user.email “you@example.com“ git config –global user.name “Your Name” 二、生成 .ssh 配置文件（创建本地公钥） ssh-keygen -t rsa -C “your_email@youremail.com“","text":"一、执行登陆用户名和密码命令 git config –gl obal user.email “you@example.com“ git config –global user.name “Your Name” 二、生成 .ssh 配置文件（创建本地公钥） ssh-keygen -t rsa -C “your_email@youremail.com“ 三、获取公钥 四、配置公钥私钥在这里插入图片描述 五、检测密钥对是否可以使用","categories":[{"name":"Git","slug":"Git","permalink":"https://he_shangshan.gitee.io/blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://he_shangshan.gitee.io/blog/tags/Git/"}]},{"title":"使用git将项目上传到github","slug":"使用git将项目上传到github（最简单方法）","date":"2020-03-18T07:22:35.000Z","updated":"2020-03-20T12:57:35.276Z","comments":true,"path":"2020/03/18/使用git将项目上传到github（最简单方法）/","link":"","permalink":"https://he_shangshan.gitee.io/blog/2020/03/18/%E4%BD%BF%E7%94%A8git%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github%EF%BC%88%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95%EF%BC%89/","excerpt":"首先你需要一个github账号https://github.com/ 我们使用git需要先安装git工具，这里给出下载地址，下载后一路直接安装即可：https://git-for-windows.github.io/ 进入Github首页，点击New repository新建一个项目","text":"首先你需要一个github账号https://github.com/ 我们使用git需要先安装git工具，这里给出下载地址，下载后一路直接安装即可：https://git-for-windows.github.io/ 进入Github首页，点击New repository新建一个项目 填写相应信息后点击create即可 Repository name: 仓库名称Description(可选): 仓库描述介绍Public, Private : 仓库权限（公开共享，私有或指定合作者）Initialize this repository with a README: 添加一个README.mdgitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignorelicense: 证书类型，对应生成文件LICENSE 点击Clone or dowload会出现一个地址，copy这个地址备用。 接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入如下界面，backend-7-4 即为我的项目名。 接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地https://github.com/heshang2018/cese_Git.git(替换成你之前复制的地址) 这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个cese_Git文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下 9. 接着继续输入命令 cd cese_Git 10.接下来依次输入以下代码即可完成其他剩余操作： git add . （注：别忘记后面的.，此操作是把cese_Git文件夹下面的文件都添加进来）git commit -m “提交信息” （注：“提交信息”里面换成你需要，如“first commit”）git push -u origin master （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）","categories":[{"name":"Git","slug":"Git","permalink":"https://he_shangshan.gitee.io/blog/categories/Git/"}],"tags":[]},{"title":"网络----“三次握手“","slug":"网络-三次握手","date":"2020-01-31T08:58:07.000Z","updated":"2020-03-21T18:01:13.454Z","comments":true,"path":"2020/01/31/网络-三次握手/","link":"","permalink":"https://he_shangshan.gitee.io/blog/2020/01/31/%E7%BD%91%E7%BB%9C-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/","excerpt":"计算机网络TCP”三次握手”第一次握手就是客户端给服务器端发送一个报文，第二次就是服务器收到报文之后，会应答一个报文给客户端，第三次握手就是客户端收到报文后再给服务器发送一个报文。 TCP是面向连接的协议,会在传送数据之前先在 发送端 和 接受端 之间创建一条连接,实现可靠传输。而运输连接是用来传送TCP报文的。TCP运输连接的建立,是面向连接的通信协议数据之前必需的步骤。","text":"计算机网络TCP”三次握手”第一次握手就是客户端给服务器端发送一个报文，第二次就是服务器收到报文之后，会应答一个报文给客户端，第三次握手就是客户端收到报文后再给服务器发送一个报文。 TCP是面向连接的协议,会在传送数据之前先在 发送端 和 接受端 之间创建一条连接,实现可靠传输。而运输连接是用来传送TCP报文的。TCP运输连接的建立,是面向连接的通信协议数据之前必需的步骤。 一次传输3个步骤:1、建立连接2、传送数据3、释放连接 三次握手是什么?三次握手其实就是指建立一个TCP连接时,需要客户端和服务端总共发送3个包。进行三次握手的主要作用就是 为了确认双方的接收能力和发送能力是否正常、指定自己的初始序号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口,建立TCP连接,并同步连接双方的序列号和确定号,交换TCP窗口大小信息 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。 首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。 在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。 确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。 DjangoJAVA集合MybatisGitSSM网络False微信小程序","categories":[{"name":"网络","slug":"网络","permalink":"https://he_shangshan.gitee.io/blog/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[]}]}